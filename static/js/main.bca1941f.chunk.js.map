{"version":3,"sources":["apiKeys.js","utils/setAuthToken.js","store/actions/authActions.js","store/actions/types.js","components/NavBar.js","components/Home.js","components/Portfolio.js","components/Transactions.js","components/Login.js","components/Register.js","store/reducers/authReducer.js","store/reducers/errorReducer.js","store/reducers/rootReducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","alphaToken","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","NavBar","handleLogout","e","preventDefault","props","history","push","this","auth","isAuthenticated","user","className","style","backgroundColor","to","name","onClick","Component","connect","state","withRouter","Home","Portfolio","ticker","quantity","errors","handleChange","setState","target","id","value","handleSubmit","url","get","then","res","data","bestMatches","length","console","log","total","balance","bal","buyData","price","post","catch","err","error","onSubmit","htmlFor","onChange","classnames","invalid","tickernotfound","quantityincorrect","Transactions","Login","email","password","userData","loginUser","nextProps","emailnotfound","passwordincorrect","setItem","jwt_decode","response","Register","password2","handleInputChange","newUser","registerUser","isEmpty","require","initialState","loading","rootReducer","combineReducers","action","middleware","thunk","store","createStore","compose","applyMiddleware","jwtToken","currentTime","Date","now","exp","window","location","href","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bca1941f.chunk.js","sourcesContent":["module.exports = {\n  alphaToken: \"9M3X6KD7CIY0ILTF\"\n};","import axios from 'axios';\n\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setAuthToken;","import axios from 'axios';\nimport setAuthToken from '../../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from './types';\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { logoutUser } from '../store/actions/authActions';\n\nclass NavBar extends Component {\n  handleLogout = (e) => {\n    e.preventDefault();\n    this.props.logoutUser();\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    if (this.props.auth.isAuthenticated) {\n      const { user } = this.props.auth;\n      return (\n        <nav className=\"nav-wrapper\" style={{backgroundColor: \"#057481\"}}>\n          <div className=\"container\">\n            <Link to=\"/\" className=\"brand-logo\">Pocket Stocks</Link>\n            <ul className=\"right\">\n              <li>Welcome, { user.name }</li>\n              <li><NavLink to=\"/portfolio\">Portfolio</NavLink></li>\n              <li><NavLink to=\"/transactions\">Transactions</NavLink></li>\n              <button \n                className=\"btn btn-large waves-effect waves-light hoverable\" \n                style={{backgroundColor: \"#f49f0a\"}} \n                onClick={this.handleLogout}\n              >\n                Logout\n              </button>\n            </ul>\n          </div>\n        </nav>\n      );\n    } else {\n      return (\n        <nav className=\"nav-wrapper\" style={{backgroundColor: \"#057481\"}}>\n          <div className=\"container\">\n            <Link to=\"/\" className=\"brand-logo\">Pocket Stocks</Link>\n            <ul className=\"right\">\n              <li><NavLink to=\"/portfolio\">Portfolio</NavLink></li>\n              <li><NavLink to=\"/transactions\">Transactions</NavLink></li>\n            </ul>\n          </div>\n        </nav>\n      );\n    }\n  }\n}\n\nNavBar.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logoutUser })(withRouter(NavBar));","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">Welcome!</h4>\n      <div className=\"center\">\n        <Link to='/login'>Login </Link>\n      </div>\n      <div className=\"center\">\n        <Link to='/register'>Sign Up</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { alphaToken } from '../apiKeys';\nimport axios from 'axios';\n\nclass Portfolio extends Component {\n  state = {\n    ticker: null,\n    quantity: null,\n    errors: {}\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { user } = this.props.auth;\n    var url = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${this.state.ticker}&apikey=${alphaToken}`;\n    axios.get(url)\n      .then(res => {\n        //console.log(res.data);\n        if (res.data.bestMatches.length === 0) {\n          var err = { ticker: \"Invalid ticker\" };\n          this.setState({\n            errors: err\n          })\n        } else {\n          var url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${this.state.ticker}&apikey=${alphaToken}`;\n          axios.get(url)\n            .then(res => {\n              console.log(res.data);\n              var total = res.data['Global Quote']['05. price'] * this.state.quantity;\n              if (user.balance < total) {\n                var err = { quantity: \"You do not have a high enough balance to purchase this\" };\n                this.setState({\n                  errors: err\n                })\n              } else {\n                var bal = user.balance - total;\n                const buyData = {\n                  id: user.id,\n                  balance: bal,\n                  ticker: this.state.ticker,\n                  quantity: this.state.quantity,\n                  price: res.data['Global Quote']['05. price']\n                };\n                axios\n                  .post(\"/api/users/buy\", buyData)\n                  .then(res => this.props.history.push(\"/portfolio\"))\n                  .catch(err =>\n                    console.log(err)\n                  );\n              }\n            })\n            .catch(error => console.log(error))\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  render() {\n    const { errors } = this.state;\n    const { user } = this.props.auth;\n    if (this.props.auth.isAuthenticated) {\n      return (\n        <div className=\"container\">\n          Portfolio\n          <div className=\"row\">\n          \t<div className=\"col s6\"></div>\n          \t<div className=\"col s6\">\n          \t\t<h3>Cash - ${ user.balance }</h3>\n              <form onSubmit={this.handleSubmit} >\n                <div className=\"input-field col s12\">\n                  <label htmlFor=\"ticker\">Ticker:</label>\n                  <input type=\"text\" id=\"ticker\" onChange={this.handleChange} error={errors.ticker} className={classnames(\"\", { invalid: errors.ticker || errors.tickernotfound })} />\n                  <span className=\"red-text\">{errors.ticker}{errors.tickernotfound}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                  <label htmlFor=\"quantity\">Quantity:</label>\n                  <input type=\"number\" id=\"quantity\" onChange={this.handleChange} error={errors.quantity} className={classnames(\"\", { invalid: errors.quantity || errors.quantityincorrect })} />\n                  <span className=\"red-text\">{errors.quantity}{errors.quantityincorrect}</span>\n                </div>\n                <div className=\"center input-field col s12\">\n                  <button className=\"btn btn-large\" style={{backgroundColor: \"#057481\"}}>Buy</button>\n                </div>\n              </form>\n          \t</div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container center\">\n          You need to make an account to access your portfolio!\n          <div>\n            <Link to='/login'>Login </Link>\n          </div>\n          <div>\n          <Link to='/register'>Register </Link>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nPortfolio.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(withRouter(Portfolio));","import React, { Component } from 'react';\n\nclass Transactions extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        Transactions\n      </div>\n    );\n  }\n}\n\nexport default Transactions;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loginUser } from '../store/actions/authActions';\nimport classnames from 'classnames';\n\nclass Login extends Component {\n  state = {\n    email: null,\n    password: null,\n    errors: {}\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to portfolio page\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/portfolio\");\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/portfolio\"); // push user to portfolio when they login\n    }\n\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const userData = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    this.props.loginUser(userData);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <h4 className=\"center\">Login!</h4>\n        <form onSubmit={this.handleSubmit} >\n          <div className=\"input-field col s12\">\n            <label htmlFor=\"email\">Email:</label>\n            <input type=\"text\" id=\"email\" onChange={this.handleChange} error={errors.email} className={classnames(\"\", { invalid: errors.email || errors.emailnotfound })} />\n            <span className=\"red-text\">{errors.email}{errors.emailnotfound}</span>\n          </div>\n          <div className=\"input-field col s12\">\n            <label htmlFor=\"password\">Password:</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange} error={errors.password} className={classnames(\"\", { invalid: errors.password || errors.passwordincorrect })} />\n            <span className=\"red-text\">{errors.password}{errors.passwordincorrect}</span>\n          </div>\n          <div className=\"center input-field col s12\">\n            <button className=\"btn btn-large\" style={{backgroundColor: \"#057481\"}}>Login</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { loginUser })(Login);","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { registerUser } from '../store/actions/authActions';\nimport classnames from 'classnames';\n\n\nclass Register extends Component {\n  state = {\n    name: null,\n    email: null,\n    password: null,\n    password2: null,\n    errors: {},\n    balance: 5000\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to portfolio\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/portfolio\");\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2,\n      balance: this.state.balance\n    };\n\n    this.props.registerUser(newUser, this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <h4 className=\"center\">Register!</h4>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <label htmlFor=\"name\">Name:</label>\n              <input type=\"text\" id=\"name\" onChange={this.handleChange} error={errors.name} className={classnames(\"\", { invalid: errors.name })} />\n              <span className=\"red-text\">{errors.name}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <label htmlFor=\"email\">Email:</label>\n              <input type=\"email\" id=\"email\" onChange={this.handleChange} error={errors.email} className={classnames(\"\", { invalid: errors.email })} />\n              <span className=\"red-text\">{errors.email}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <label htmlFor=\"password\">Password:</label>\n              <input type=\"password\" id=\"password\" onChange={this.handleChange} error={errors.password} className={classnames(\"\", { invalid: errors.password })} />\n              <span className=\"red-text\">{errors.password}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <label htmlFor=\"password2\">Confirm Password:</label>\n              <input type=\"password\" id=\"password2\" onChange={this.handleChange} error={errors.password2} className={classnames(\"\", { invalid: errors.password2 })} />\n              <span className=\"red-text\">{errors.password2}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"center input-field col s12\">\n              <button className=\"btn\" style={{backgroundColor: \"#057481\"}}>Register</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { registerUser })(withRouter(Register));","import {\n  SET_CURRENT_USER,\n  USER_LOADING\n} from '../actions/types';\n\nconst isEmpty = require('is-empty');\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}","import { GET_ERRORS } from '../actions/types';\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport errorReducer from './errorReducer';\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport Portfolio from './components/Portfolio';\nimport Transactions from './components/Transactions';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\nimport { setCurrentUser, logoutUser } from './store/actions/authActions';\nimport store from './store/store';\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <NavBar />\n          <Route exact path='/' component={Home} />\n          <Route exact path='/portfolio' component={Portfolio} />\n          <Route exact path='/transactions' component={Transactions} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/register' component={Register} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}